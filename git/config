[alias]
  # List aliases
  aliases = config --get-regexp ^alias\\.
  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD
  # List branches
  branches = branch -a
  # Credit a co-author on the latest commit
  coauthor = !"f() { git commit --amend -m $(git log --format=%B -n1) -m \"Co-authored-by: $1 <$2>\"; }; f"
  # List repo contributors
  contributors = shortlog --summary --numbered
  # Credit an author on the latest commit
  credit = !"f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
  # Switch to a branch, creating it if necessary
  go = !"f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
  # Ignore upstream files to avoid unnecessary and expensive checks
  ignore = update-index --assume-unchanged
  # List currently ignored files
  ignored = !git ls-files -v | grep ^[a-z]
  # Remove local branches that have already been merged with current
  purge = !"f() { git fetch --prune; git branch --format '%(if)%(HEAD)%(then)*%(else)%(refname:short)%(end)' --merged | grep -v '^\\(\\*\\|master\\|develop\\)$' | xargs -n 1 git branch -d; }; f"
  # Remove remote branches that have already been merged to master
  purge-remote = !"f() { git fetch --prune; git branch --format '%(refname:short)' -r --merged \"${1:-master}\" | sed 's/origin\\///' | grep -v '^\\(HEAD\\|master\\|develop\\)$' | xargs -n 1 git push origin --delete --no-verify; }; f"
  # List remotes
  remotes = remote -v
  # Revert a specific pull request
  revert-parent = revert -m 1
  # Completely remove submodule
  rm-module = !"f() { if git submodule status \"$1\" >/dev/null 2>&1; then git submodule deinit -f \"$1\" && rmdir \"$1\" && rm -rf .git/modules/\"$1\" && git config --file=.gitmodules --remove-section submodule.\"$1\" && git add .gitmodules && git rm --cached -rf \"$1\"; else echo \"Submodule '$1' not found.\"; fi }; f"
  # Instruct Git to not change files and persist local changes
  skip = update-index --skip-worktree
  # List skipped files
  skipped = !git ls-files -v | grep --color "^S"
  # List tags
  tags = tag -l
  # Unignore files
  unignore = update-index --no-assume-unchanged
  # Reset files flags and track changes
  unskip = update-index --no-skip-worktree
  # List remote URLs
  urls = config --get-regexp ^url\\.

  # View the current working tree status using the short format
  s = status -s
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit
  plog = log --graph --pretty=format:'%h -%d %s %n' --abbrev-commit --date=relative --branches
  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"
  # Update all submodules for current repository
  su = submodule update --recursive --init
  # Clone a repository including all submodules
  c = clone --recursive
  # Commit all changes
  ca = !git add -A && git commit -av
  # Display list of files in history by size
  du = !"git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | sed -n 's/^blob //p' | sort --numeric-sort --key=2 | cut -c 1-12,41- | if [[ -x $(command -v numfmt) ]]; then numfmt --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest; else cat; fi"
  # Interactive rebase with the given number of latest commits
  reb = !"r() { git rebase -i HEAD~$1; }; r"
  # Find branches containing commit
  fb = !"f() { git branch -a --contains $1; }; f"
  # Find tags containing commit
  ft = !"f() { git describe --always --contains $1; }; f"
  # Find commits by source code
  fc = !"f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
  # Find commits by commit message
  fm = !"f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

[apply]
  whitespace = fix

[branch]
  autoSetupMerge = always
  autoSetupRebase = always

[core]
  whitespace = trailing-space,space-before-tab,indent-with-non-tab,cr-at-eol
  trustctime = false
  autocrlf = input
  pager = delta

[color]
  ui = auto
  interactive = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  commit = green
  meta = yellow
  frag = cyan
  old = red
  new = green
  whitespace = red reverse

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[delta]
  inspect-raw-lines = false
  diff-highlight = true
  side-by-side = true
  whitespace-error-style = 22 reverse
  syntax-theme = Nord
  plus-empty-line-marker-style = reverse "#2E4A3E"
  minus-empty-line-marker-style = reverse "#553440"
  line-numbers-plus-style = bold "#2E4A3E"
  line-numbers-minus-style = bold "#553440"
  line-numbers-right-style = black
  line-numbers-left-style = black
  line-numbers-left-format = {nm:^3}│
  line-numbers-right-format = {np:^3}│

[diff]
  renames = copies
  colorMoved = default

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  required = true
  process = git-lfs filter-process

[gpg]
  program = gpg

[help]
  autocorrect = 1

[interactive]
  diffFilter = delta --color-only

[merge]
  log = true

[pull]
  default = current
  ff = only
  rebase = true

[push]
  default = current
  followTags = true

[rebase]
  autoStash = true 